SIMULATION/PROGRAMMING
Program Code : Input block and output block


#!/usr/bin/env python
from importlib import import_module import os
from flask import Flask, render_template, Response,request, redirect, url_for, make_response from picamera.array import PiRGBArray
from picamera import PiCamera import time
import cv2
import numpy as np import math
import motors import requests import threading
# import camera driver
#if os.environ.get('CAMERA'):
# Camera = import_module('camera_' + os.environ['CAMERA']).Camera #else:
# from camera_pi import Camera
# Raspberry Pi camera module (requires picamera package) from camera_pi import Camera
#camera = PiCamera() app = Flask( name )
 





@app.route('/') def index():
"""Video streaming home page.""" return render_template('index.html') def gen(camera):
theta=0 minLineLength = 5
maxLineGap = 10
camera.resolution = (640, 480)
camera.framerate = 30
rawCapture = PiRGBArray(camera, size=(640, 480)) time.sleep(0.1)
"""Video streaming generator function."""
for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True): image = frame.array
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) blurred = cv2.GaussianBlur(gray, (5, 5), 0)
edged = cv2.Canny(blurred, 85, 85)
lines = cv2.HoughLinesP(edged,1,np.pi/180,10,minLineLength,maxLineGap) print lines
#if(lines !=None):
if(len(lines) > 0):
for x in range(0, len(lines)):
for x1,y1,x2,y2 in lines[x]: cv2.line(image,(x1,y1),(x2,y2),(0,255,0),2) theta=theta+math.atan2((y2-y1),(x2-x1))
 





#print(theta)GPIO pins were connected to arduino for servo steering control threshold=6
if(theta>threshold):
print("left") motors.turnLeft() if(theta<-threshold):
print("right") motors.turnRight() if(abs(theta)<threshold):
print "straight" motors.forward() theta=0
cv2.imwrite('hvs.jpg', image) img = open('hvs.jpg', 'rb').read() #cv2.imshow("Frame",image) yield (b'--frame\r\n'
b'Content-Type: image/jpeg\r\n\r\n' + img + b'\r\n') #key = cv2.waitKey(1) & 0xFF rawCapture.truncate(0)
#if key == ord("q"):
# break
@app.route('/<changepin>', methods=['POST']) def reroute(changepin):
changePin = int(changepin) #cast changepin to an int if changePin == 1:
motors.stop()
 





response = make_response(redirect(url_for('index'))) return(response)
@app.route('/video_feed') def video_feed():
"""Video streaming route. Put this in the src attribute of an img tag.""" return Response(gen(PiCamera()),
mimetype='multipart/x-mixed-replace; boundary=frame') if    name	== '  main ':
#app.run(debug=True, host='0.0.0.0', port=5000) #set up the server in debug mode to the port 8000
app.run(host='0.0.0.0', threaded=True)
 





Code for Motors :
import RPi.GPIO as GPIO import time
from time import sleep Motor1A = 05
Motor1B = 06
Motor2A = 13
Motor2B = 19
#Set up all as outputs GPIO.setmode(GPIO.BCM) # Use BCM GPIO
numbers GPIO.setup(Motor1A,GPIO.OUT) GPIO.setup(Motor1B,GPIO.OUT) GPIO.setup(Motor2A,GPIO.OUT) GPIO.setup(Motor2B,GPIO.OUT) def forward():
print("Going Forwards")


GPIO.output(Motor1A,GPIO.HIGH) GPIO.output(Motor1B,GPIO.LOW)

GPIO.output(Motor2A,GPIO.HIGH) GPIO.output(Motor2B,GPIO.LOW)

def
 





backward():
print("Going Backwards")
GPIO.output(Motor1A,GPIO.LOW) GPIO.output(Motor1B,GPIO.HIGH)
GPIO.output(Mo tor2A,GPIO.LOW)
GPIO.output(Motor2B,GPIO.HIGH) def turnRight():
print("Going Right")
GPIO.output(Motor1A,GPIO.HIGH) GPIO.output(Motor1B,GPIO.LOW) GPIO.output(Motor2
A,GPIO.LOW)
GPIO.output(Motor2B,GPIO.HIGH) def turnLeft():
print("Going Left")
GPIO.output(Motor1A,GPIO.LOW) GPIO.output(Motor1B,GPIO.HIGH) GPIO.output(Motor2A
,GPIO.HIGH)
GPIO.output(Motor2B,GPIO.LOW) def
stop():
 





print("Stopping") GPIO.output(Motor1A,GPIO.LOW) GPIO.output(Motor1B,GPIO.L
OW)
GPIO.output(Motor2A,GPIO.LOW) GPIO.output(Motor2B,GPIO.LOW)
 
